openapi: 3.0.3
info:
  version: 1.0.0
  title: Plastep work instructions API-spec

security:
  - bearerAuth: []

paths:
  /v1/system/ping:
    get:
      operationId: ping
      summary: Replies with pong
      description: Replies ping with pong
      tags:
        - System
      responses:
        "200":
          description: Pong
          content:
            text/plain:
              schema:
                type: string

  /v1/system/synchronize/products:
    post:
      operationId: synchronizeProducts
      summary: Starts the synchronization process of the products
      description: Starts the synchronization process of the products
      tags:
        - System
      responses:
        "200":
          description: Sync started
    get:
      operationId: getProductSynchronizationInProgress
      summary: Gets the status of synchronization process of the products
      description: Gets the status of synchronization process of the products
      tags:
        - System
      responses:
        "200":
          description: Status of sync process
          content:
            application/json:
              schema:
                type: boolean
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/system/synchronize/machines:
    post:
      operationId: synchronizeMachines
      summary: Starts the synchronization process of the machines
      description: Starts the synchronization process of the machines
      tags:
        - System
      responses:
        "200":
          description: Sync started
    get:
      operationId: getMachineSynchronizationInProgress
      summary: Gets the status of synchronization process of the machines
      description: Gets the status of synchronization process of the machines
      tags:
        - System
      responses:
        "200":
          description: Status of sync process
          content:
            application/json:
              schema:
                type: boolean
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/system/synchronize/workSetsAndPhases:
    post:
      operationId: synchronizeWorkSetsAndPhases
      summary: Starts the synchronization process of the work sets and phases
      description: Starts the synchronization process of the work sets and phases
      parameters:
        - name: updatedAfter
          in: query
          required: true
          schema:
            type: string
        - name: updatedBefore
          in: query
          required: true
          schema:
            type: string
      tags:
        - System
      responses:
        "200":
          description: Sync started
    get:
      operationId: getWorkSetsAndPhasesSynchronizationInProgress
      summary: Gets the status of synchronization process of the work sets and phases
      description: Gets the status of synchronization process of the work sets and phases
      tags:
        - System
      responses:
        "200":
          description: Status of sync phase process
          content:
            application/json:
              schema:
                type: boolean
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/system/syncStatus:
    get:
      operationId: getSyncStatus
      summary: Gets the status of synchronization process of the work sets and phases
      description: Gets the status of synchronization process of the work sets and phases
      tags:
        - System
      responses:
        "200":
          description: Status of sync process
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SyncStatus"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/workSets:
    get:
      operationId: listWorkSets
      summary: Lists work sets.
      description: Lists work sets.
      tags:
        - WorkSets
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: productId
          in: query
          description: Filter by product ID. If provided without revision ID, returns work sets for currently published revision of the product.
          schema:
            type: string
            format: uuid
        - name: revisionId
          in: query
          description: Filter by revision ID. Product ID must be provided as well.
          schema:
            type: string
            format: uuid
        - name: listOnlyEnabled
          in: query
          description: Filter by enabled status. If true, returns only enabled work sets. If false, returns all.
          schema:
            type: boolean
      responses:
        "200":
          description: List of work sets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkSet"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of work sets with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createWorkSet
      summary: Create a work set.
      description: Creates a new work set.
      tags:
        - WorkSets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkSet"
        description: Payload
        required: true
      responses:
        "200":
          description: Created WorkSet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkSet"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/workSets/{workSetId}:
    get:
      operationId: findWorkSet
      summary: Find a work set.
      description: Finds a work set by id.
      tags:
        - WorkSets
      parameters:
        - name: workSetId
          required: true
          in: path
          description: work set id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: WorkSet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkSet"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateWorkSet
      summary: Update a work set.
      description: Updates a work set
      tags:
        - WorkSets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkSet"
        description: Payload
        required: true
      parameters:
        - name: workSetId
          required: true
          in: path
          description: work set id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated WorkSet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkSet"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteWorkSet
      summary: Delete a work set.
      description: Deletes a work set.
      tags:
        - WorkSets
      parameters:
        - name: workSetId
          required: true
          in: path
          description: work set id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/workSets/{workSetId}/phases:
    get:
      operationId: listPhases
      summary: Lists phases.
      description: Lists phases.
      tags:
        - Phases
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: workSetId
          required: true
          in: path
          description: workSet ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of phases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Phase"
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of phases with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createPhase
      summary: Create a phase.
      description: Creates a new phase.
      tags:
        - Phases
      parameters:
        - name: workSetId
          required: true
          in: path
          description: workSet ID
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Phase"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Phase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Phase"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/workSets/{workSetId}/phases/{phaseId}:
    get:
      operationId: findPhase
      summary: Find a phase.
      description: Finds a phase by id.
      tags:
        - Phases
      parameters:
        - name: workSetId
          required: true
          in: path
          description: workSet ID
          schema:
            type: string
            format: uuid
        - name: phaseId
          required: true
          in: path
          description: phase id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Phase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Phase"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updatePhase
      summary: Update a phase.
      description: Updates a phase
      tags:
        - Phases
      parameters:
        - name: workSetId
          required: true
          in: path
          description: workSet ID
          schema:
            type: string
            format: uuid
        - name: phaseId
          required: true
          in: path
          description: phase id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Phase"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated Phase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Phase"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deletePhase
      summary: Delete a phase.
      description: Deletes a phase.
      tags:
        - Phases
      parameters:
        - name: workSetId
          required: true
          in: path
          description: workSet ID
          schema:
            type: string
            format: uuid
        - name: phaseId
          required: true
          in: path
          description: phase id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/products:
    get:
      operationId: listProducts
      summary: Lists products.
      description: Lists products.
      tags:
        - Products
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: workSetId
          in: query
          description: Filter by workSetId
          schema:
            type: string
            format: uuid
        - name: productCode
          in: query
          description: Filter instructions by product code (strict filter)
          schema:
            type: string
        - name: productName
          in: query
          description: Filter instructions by product name (filters by partial match of the name start)
          schema:
            type: string
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of products with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createProduct
      summary: Create a product.
      description: Creates a new product.
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/products/{productId}:
    get:
      operationId: findProduct
      summary: Find a product.
      description: Finds a product by id.
      tags:
        - Products
      parameters:
        - name: productId
          required: true
          in: path
          description: product id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateProduct
      summary: Update a product.
      description: Updates a product
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        description: Payload
        required: true
      parameters:
        - name: productId
          required: true
          in: path
          description: product id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteProduct
      summary: Delete a product.
      description: Deletes a product.
      tags:
        - Products
      parameters:
        - name: productId
          required: true
          in: path
          description: product id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/instructions:
    get:
      operationId: listInstructions
      summary: Lists instructions.
      description: Lists instructions.
      tags:
        - Instructions
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: modifiedBefore
          in: query
          description: Filter instructions modified before given date
          schema:
            type: string
            format: date-time
        - name: modifiedAfter
          in: query
          description: Filter instructions modified after given date
          schema:
            type: string
            format: date-time
        - name: productCode
          in: query
          description: Filter instructions by product code (strict filter)
          schema:
            type: string
        - name: productName
          in: query
          description: Filter instructions by product name (filters by partial match of the name start)
          schema:
            type: string
        - name: responsiblePersonId
          in: query
          description: Filter instructions by work responsible person id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of instructions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Instruction"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of instructions with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createInstruction
      summary: Create a instruction.
      description: Creates a new instruction.
      tags:
        - Instructions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Instruction"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Instruction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instruction"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/instructions/{instructionId}:
    get:
      operationId: findInstruction
      summary: Find a instruction.
      description: Finds a instruction by id.
      tags:
        - Instructions
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Instruction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instruction"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateInstruction
      summary: Update a instruction.
      description: Updates a instruction
      tags:
        - Instructions
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Instruction"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated Instruction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instruction"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteInstruction
      summary: Delete a instruction.
      description: Deletes a instruction.
      tags:
        - Instructions
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/instructions/{instructionId}/productInspectionTemplates:
    get:
      operationId: listProductInspectionTemplates
      summary: Lists templates of product inspection forms
      description: Lists templates of product inspection forms
      tags:
        - ProductInspectionTemplates
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of phases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInspectionTemplate"
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of form templates with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createInspectionFormTemplate
      summary: Create a template for product inspection form.
      description: Create a template for product inspection form.
      tags:
        - ProductInspectionTemplates
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInspectionTemplate"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Phase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInspectionTemplate"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/instructions/{instructionId}/productInspectionTemplates/{templateId}:
    get:
      operationId: findProductInspectionTemplate
      summary: Find product inspection form template.
      description: Finds product inspection form template by id.
      tags:
        - ProductInspectionTemplates
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
        - name: templateId
          required: true
          in: path
          description: template id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ProductInspectionTemplate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInspectionTemplate"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateProductInspectionTemplate
      summary: Update a product inspection form template.
      description: Updates a product inspection form template
      tags:
        - ProductInspectionTemplates
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
        - name: templateId
          required: true
          in: path
          description: template id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInspectionFormTemplate"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated ProductInspectionFormTemplate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInspectionFormTemplate"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteProductInspectionTemplate
      summary: Delete a product inspection form template.
      description: Deletes a product inspection form template.
      tags:
        - ProductInspectionTemplates
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
        - name: templateId
          required: true
          in: path
          description: template id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/instructions/{instructionId}/productInspections:
    get:
      operationId: listProductInspections
      summary: Lists product inspections
      description: Lists product inspections
      tags:
        - ProductInspections
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of product inspections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInspection"
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of product inspections with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createProductInspection
      summary: Create a product inspection.
      description: Create a product inspection.
      tags:
        - ProductInspections
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInspection"
        description: Payload
        required: true
      responses:
        "200":
          description: Created ProductInspection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInspection"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/instructions/{instructionId}/productInspections/{inspectionId}:
    get:
      operationId: findProductInspection
      summary: Find product inspection
      description: Finds product inspection by id
      tags:
        - ProductInspections
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
        - name: inspectionId
          required: true
          in: path
          description: inspection id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ProductInspection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInspection"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateProductInspection
      summary: Update a product inspection
      description: Updates a product inspection
      tags:
        - ProductInspections
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
        - name: inspectionId
          required: true
          in: path
          description: inspection id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInspection"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated ProductInspection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInspection"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteProductInspection
      summary: Delete a product inspection
      description: Deletes a product inspection
      tags:
        - ProductInspection
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
        - name: inspectionId
          required: true
          in: path
          description: inspection id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/revisions:
    get:
      operationId: listRevisions
      summary: Lists revisions.
      description: Lists revisions.
      tags:
        - Revisions
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: instructionId
          in: query
          description: Instruction id, if provided, productCode and productName filters are ignored
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by status
          schema:
            $ref: "#/components/schemas/RevisionStatus"
        - name: productCode
          in: query
          description: Filter by product code (strict) if instructionId filter is not present
          schema:
            type: string
        - name: productName
          in: query
          description: Filter by product name (match by start of the name) if instructionId filter is not present
          schema:
            type: string
        - name: before
          in: query
          description: Filter by date before
          schema:
            type: string
            format: date-time
        - name: after
          in: query
          description: Filter by date after
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of revisions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Revision"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of revisions with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createRevision
      summary: Create a revision.
      description: Creates a new revision.
      tags:
        - Revisions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Revision"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/revisions/{revisionId}:
    get:
      operationId: findRevision
      summary: Find a revision.
      description: Finds a revision by id.
      tags:
        - Revisions
      parameters:
        - name: revisionId
          required: true
          in: path
          description: revision id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateRevision
      summary: Update a revision.
      description: Updates a revision
      tags:
        - Revisions
      parameters:
        - name: revisionId
          required: true
          in: path
          description: revision id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Revision"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated Revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteRevision
      summary: Delete a revision.
      description: Deletes a revision.
      tags:
        - Revisions
      parameters:
        - name: revisionId
          required: true
          in: path
          description: revision id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/revisions/{revisionId}/copy:
    post:
      operationId: copyRevision
      summary: Copies a revision.
      description: Copies a revision and all its content to new revision.
      tags:
        - Revisions
      parameters:
        - name: revisionId
          required: true
          in: path
          description: revision id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopyContentChanges"
        description: Payload
        required: true
      responses:
        "200":
          description: Copied Revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users:
    get:
      operationId: listUsers
      summary: List Users.
      description: Lists Users.
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: integer
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of users
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users/{userId}:
    get:
      operationId: findUser
      summary: Find a users.
      description: Finds a user by id.
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: users id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/machines:
    get:
      operationId: listMachines
      summary: Lists machines.
      description: Lists machines.
      tags:
        - Machines
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
      responses:
        "200":
          description: List of machines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Machine"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of machines with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/machines/{machineId}:
    get:
      operationId: findMachine
      summary: Find a machine.
      description: Finds a machine by id.
      tags:
        - Machines
      parameters:
        - name: machineId
          required: true
          in: path
          description: machine id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Machine
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Machine"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/comments:
    get:
      operationId: listComments
      summary: Lists comments.
      description: Lists comments.
      tags:
        - Comments
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: productId
          in: query
          description: Filter by product id, if used, other product-related filters are ignored
          schema:
            type: string
            format: uuid
        - name: revisionId
          in: query
          description: Filter by revision id
          schema:
            type: string
            format: uuid
        - name: includeSubStructure
          in: query
          description: Include comments from sub products of product with given ID. ProductId must exist. RevisionId cannot be used with this filter.
          schema:
            type: boolean
        - name: createdBefore
          in: query
          description: Filter comments created before given date
          schema:
            type: string
            format: date-time
        - name: createdAfter
          in: query
          description: Filter comments created after given date
          schema:
            type: string
            format: date-time
        - name: commentType
          in: query
          description: Filter by comment type
          schema:
            $ref: "#/components/schemas/CommentType"
        - name: productCode
          in: query
          description: Filter instructions by product code (strict filter), applied only if productId is missing
          schema:
            type: string
        - name: productName
          in: query
          description: Filter instructions by product name (filters by partial match of the name start), applied only if productId is missing
          schema:
            type: string
      responses:
        "200":
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of comments with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createComment
      summary: Create a comment.
      description: Creates a new comment.
      tags:
        - Comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/comments/{commentId}:
    get:
      operationId: findComment
      summary: Find a comment.
      description: Finds a comment by id.
      tags:
        - Comments
      parameters:
        - name: commentId
          required: true
          in: path
          description: comment id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateComment
      summary: Update a comment.
      description: Updates a comment
      tags:
        - Comments
      parameters:
        - name: commentId
          required: true
          in: path
          description: comment id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated Comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteComment
      summary: Delete a comment.
      description: Deletes a comment.
      tags:
        - Comments
      parameters:
        - name: commentId
          required: true
          in: path
          description: comment id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      description: Error object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Metadata:
      type: object
      description: Metadata object
      properties:
        creatorId:
          type: string
          format: uuid
          description: ID of creator
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Created date
          readOnly: true
        lastModifierId:
          type: string
          format: uuid
          description: Id of last modifier
          readOnly: true
        modifiedAt:
          type: string
          format: date-time
          description: Date modified
          readOnly: true

    WorkSet:
      type: object
      description: WorkSet object. WorkSet describes a single place where one or more phases are done.
      required:
        - name
        - productId
        - revisionId
        - enabled
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Work set id in UUID format
        name:
          type: string
          description: Work set name
        productId:
          type: string
          format: uuid
          description: Product id of workset
        revisionId:
          type: string
          format: uuid
          description: Revision id of workset
        enabled:
          type: boolean
          description: Is workset enabled
        metadata:
          $ref: "#/components/schemas/Metadata"

    Product:
      type: object
      description: Product object. Product describes single item/thing that is produced
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Product id in UUID format
        name:
          type: string
          description: Name of the product
        productCode:
          type: string
          description: Product code
        metadata:
          $ref: "#/components/schemas/Metadata"

    Instruction:
      type: object
      description: Instruction object
      required:
        - productId
        - responsiblePersonIds
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Instruction id in UUID format
        productId:
          type: string
          format: uuid
        responsiblePersonIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of keycloak user ID's to whom notifications related to modifications and suggestions should be sent. Must contain at least one user id.
        publishedRevisionId:
          type: string
          format: uuid
          description: UUID of currently active/published revision
          readOnly: true
        metadata:
          $ref: "#/components/schemas/Metadata"

    Revision:
      type: object
      description: Revision object
      required:
        - status
        - instructionId
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Revision id in UUID format
        instructionId:
          type: string
          format: uuid
          description: Instruction id in UUID format
        status:
          $ref: "#/components/schemas/RevisionStatus"
        version:
          type: integer
          format: int32
          description: Version number
          readOnly: true
        approvedDate:
          type: string
          format: date-time
          description: Date time when current revision was approved
          readOnly: true
        metadata:
          $ref: "#/components/schemas/Metadata"

    RevisionStatus:
      type: string
      description: Revision status enum
      enum:
        - DRAFT
        - ACTIVE
        - REJECTED
        - DEPRECATED

    User:
      type: object
      description: User representation
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string

    Phase:
      type: object
      description: Phase object. Describes single phase within work set. Phase should always be linked to single work set.
      required:
        - name
        - workSetId
        - instructionText
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Phase id in UUID format
        name:
          type: string
          description: Phase name
        workSetId:
          type: string
          format: uuid
          description: WorkSet id in UUID format
        instructionText:
          type: string
          description: Detailed instruction text for this phase
        mediaS3Keys:
          type: array
          items:
            type: string
          description: List S3 keys
        metadata:
          $ref: "#/components/schemas/Metadata"

    Machine:
      type: object
      description: Machine object
      required:
        - code
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Machine id in UUID format
        code:
          type: string
          description: Machine code
        description:
          type: string
          description: Machine description
        metadata:
          $ref: "#/components/schemas/Metadata"

    Comment:
      type: object
      description: Machine object
      required:
        - productId
        - author
        - text
        - commentType
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Comment id in UUID format
        productId:
          type: string
          format: uuid
          description: Product id in UUID format
        revisionId:
          type: string
          format: uuid
          description: Revision id in UUID format
        parentId:
          type: string
          format: uuid
          description: Parent comment id in UUID format if any
        commentType:
          description: Comment type
          $ref: "#/components/schemas/CommentType"
        author:
          type: string
          description: Author of the comment
        text:
          type: string
          description: Comment text
        metadata:
          $ref: "#/components/schemas/Metadata"

    CommentType:
      type: string
      description: Sync enum
      enum:
        - COMMENT
        - REPLY

    CopyPhase:
      type: object
      required:
        - originalPhaseId
        - newPhase
      properties:
        originalPhaseId:
          type: string
          format: uuid
          description: Original phase id in UUID format
        newPhase:
          $ref: "#/components/schemas/Phase"

    CopyContentChanges:
      type: object
      properties:
        newPhases:
          type: array
          items:
            $ref: "#/components/schemas/CopyPhase"
          description: List of new phases

    SyncType:
      type: string
      description: Sync enum
      enum:
        - MACHINES
        - PRODUCTS
        - PHASES

    SyncStatus:
      type: object
      properties:
        syncType:
          $ref: "#/components/schemas/SyncType"
        inProgress:
          type: boolean
          description: Is sync in progress
        startedAt:
          type: string
          format: date-time
          description: Date time when sync was started
        finishedAt:
          type: string
          format: date-time
          description: Date time when sync was finished
        syncNumber:
          type: integer
          format: int32
          description: Sync number

    ProductInspectionTemplate:
      type: object
      description: Product inspection template object
      required:
        - inspectionInterval
        - fields
        - isActive
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Product inspection template id in UUID format
        isActive:
          type: boolean
          description: Is product inspection template active
        inspectionInterval:
          type: number
          format: float
          description: Product inspection template object
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ProductInspectionTemplateField"
          description: List of product inspection template fields
        metadata:
          $ref: "#/components/schemas/Metadata"

    ProductInspectionTemplateField:
      type: object
      description: Product inspection template field object
      required:
        - measurementNumber
      properties:
        unit:
          type: string
          description: Product inspection template field unit
        minTolerance:
          type: number
          format: float
          description: Product inspection template field min tolerance
        maxTolerance:
          type: number
          format: float
          description: Product inspection template field max tolerance
        measurementNumber:
          type: integer
          description: Product inspection template field measurement number
        nominalNumber:
          type: number
          format: float
          description: Product inspection template field nominal number

    ProductInspection:
      type: object
      description: Product inspection object
      required:
        - fields
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Product inspection id in UUID format
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ProductInspectionField"
          description: List of product inspection fields
        metadata:
          $ref: "#/components/schemas/Metadata"

    ProductInspectionField:
      type: object
      description: Product inspection field object
      properties:
        unit:
          type: string
          description: Product inspection field unit
        measurementNumber:
          type: integer
          description: Product inspection field measurement number
        nominalNumber:
          type: number
          format: float
          description: Product inspection field nominal number
        measurement:
          type: number
          format: float
          description: Product inspection field measurement
        minTolerance:
          type: number
          format: float
          description: Product inspection field min tolerance
        maxTolerance:
          type: number
          format: float
          description: Product inspection field max tolerance
        status:
          $ref: "#/components/schemas/ProductInspectionFieldStatus"
        metadata:
          $ref: "#/components/schemas/Metadata"
