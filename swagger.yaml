openapi: 3.0.3
info:
  version: 1.0.0
  title: Plastep work instructions API-spec

security:
  - bearerAuth: []

paths:
  /v1/system/ping:
    get:
      operationId: ping
      summary: Replies with pong
      description: Replies ping with pong
      tags:
        - System
      responses:
        "200":
          description: Pong
          content:
            text/plain:
              schema:
                type: string

  /v1/workSets:
    get:
      operationId: listWorkSets
      summary: Lists work sets.
      description: Lists work sets.
      tags:
        - WorkSets
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
      responses:
        "200":
          description: List of work sets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkSet"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of work sets with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createWorkSet
      summary: Create a work set.
      description: Creates a new work set.
      tags:
        - WorkSets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkSet"
        description: Payload
        required: true
      responses:
        "200":
          description: Created WorkSet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkSet"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/workSets/{workSetId}:
    get:
      operationId: findWorkSet
      summary: Find a work set.
      description: Finds a work set by id.
      tags:
        - WorkSets
      parameters:
        - name: workSetId
          required: true
          in: path
          description: work set id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: WorkSet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkSet"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateWorkSet
      summary: Update a work set.
      description: Updates a work set
      tags:
        - WorkSets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkSet"
        description: Payload
        required: true
      parameters:
        - name: workSetId
          required: true
          in: path
          description: work set id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated WorkSet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkSet"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteWorkSet
      summary: Delete a work set.
      description: Deletes a work set.
      tags:
        - WorkSets
      parameters:
        - name: workSetId
          required: true
          in: path
          description: work set id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/products:
    get:
      operationId: listProducts
      summary: Lists products.
      description: Lists products.
      tags:
        - Products
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: workSetId
          in: query
          description: Filter by workSetId
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of products with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createProduct
      summary: Create a product.
      description: Creates a new product.
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/products/{productId}:
    get:
      operationId: findProduct
      summary: Find a product.
      description: Finds a product by id.
      tags:
        - Products
      parameters:
        - name: productId
          required: true
          in: path
          description: product id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateProduct
      summary: Update a product.
      description: Updates a product
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        description: Payload
        required: true
      parameters:
        - name: productId
          required: true
          in: path
          description: product id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated Product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteProduct
      summary: Delete a product.
      description: Deletes a product.
      tags:
        - Products
      parameters:
        - name: productId
          required: true
          in: path
          description: product id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/instructions:
    get:
      operationId: listInstructions
      summary: Lists instructions.
      description: Lists instructions.
      tags:
        - Instructions
      parameters:
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: productId
          in: query
          description: Filter by product id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of instructions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Instruction"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of instructions with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createInstruction
      summary: Create a instruction.
      description: Creates a new instruction.
      tags:
        - Instructions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Instruction"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Instruction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instruction"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/instructions/{instructionId}:
    get:
      operationId: findInstruction
      summary: Find a instruction.
      description: Finds a instruction by id.
      tags:
        - Instructions
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Instruction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instruction"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateInstruction
      summary: Update a instruction.
      description: Updates a instruction
      tags:
        - Instructions
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Instruction"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated Instruction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instruction"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteInstruction
      summary: Delete a instruction.
      description: Deletes a instruction.
      tags:
        - Instructions
      parameters:
        - name: instructionId
          required: true
          in: path
          description: instruction id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/instructions/{instructionId}/revisions:
    get:
      operationId: listRevisions
      summary: Lists revisions.
      description: Lists revisions.
      tags:
        - Revisions
      parameters:
        - name: instructionId
          in: path
          required: true
          description: Instruction id
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number. Defaults to 0
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size. Defaults to 10
          schema:
            type: integer
        - name: status
          in: query
          description: Filter by status
          schema:
            $ref: "#/components/schemas/RevisionStatus"
      responses:
        "200":
          description: List of revisions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Revision"
          headers:
            Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of revisions with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createRevision
      summary: Create a revision.
      description: Creates a new revision.
      tags:
        - Revisions
      parameters:
        - name: instructionId
          in: path
          required: true
          description: Instruction id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Revision"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/instructions/{instructionId}/revisions/{revisionId}:
    get:
      operationId: findRevision
      summary: Find a revision.
      description: Finds a revision by id.
      tags:
        - Revisions
      parameters:
        - name: instructionId
          in: path
          required: true
          description: Instruction id
          schema:
            type: string
            format: uuid
        - name: revisionId
          required: true
          in: path
          description: revision id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateRevision
      summary: Update a revision.
      description: Updates a revision
      tags:
        - Revisions
      parameters:
        - name: instructionId
          in: path
          required: true
          description: Instruction id
          schema:
            type: string
            format: uuid
        - name: revisionId
          required: true
          in: path
          description: revision id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Revision"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated Revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteRevision
      summary: Delete a revision.
      description: Deletes a revision.
      tags:
        - Revisions
      parameters:
        - name: instructionId
          in: path
          required: true
          description: Instruction id
          schema:
            type: string
            format: uuid
        - name: revisionId
          required: true
          in: path
          description: revision id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users:
    get:
      operationId: listUsers
      summary: List Users.
      description: Lists Users.
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: integer
        - name: includeGroupsAndRoles
          in: query
          description: Return groups and roles
          schema:
            type: boolean
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of card codes.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users/{userId}:
    get:
      operationId: findUser
      summary: Find a users.
      description: Finds a user by id.
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: users id
          schema:
            type: string
            format: uuid
        - name: includeGroupsAndRoles
          in: query
          description: Should user groups and roles be filled to user representation
          schema:
            type: boolean
      responses:
        "200":
          description: Example
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      description: Error object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Metadata:
      type: object
      description: Metadata object
      properties:
        creatorId:
          type: string
          format: uuid
          description: ID of creator
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Created date
          readOnly: true
        lastModifierId:
          type: string
          format: uuid
          description: Id of last modifier
          readOnly: true
        modifiedAt:
          type: string
          format: date-time
          description: Date modified
          readOnly: true

    WorkSet:
      type: object
      description: WorkSet object. WorkSet describes a single place where one or more phases are done.
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Work set id in UUID format
        name:
          type: string
          description: Work set name
        metadata:
          $ref: "#/components/schemas/Metadata"

    Product:
      type: object
      description: Product object. Product describes single item/thing that is produced
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Product id in UUID format
        name:
          type: string
          description: Name of the product
        workSetId:
          type: string
          format: uuid
          description: Work set Id
        metadata:
          $ref: "#/components/schemas/Metadata"

    Instruction:
      type: object
      description: Instruction object
      required:
        - productId
        - responsiblePersonIds
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Instruction id in UUID format
        productId:
          type: string
          format: uuid
        responsiblePersonIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of keycloak user ID's to whom notifications related to modifications and suggestions should be sent. Must contain at least one user id.
        publishedRevisionId:
          type: string
          format: uuid
          description: UUID of currently active/published revision
          readOnly: true
        metadata:
          $ref: "#/components/schemas/Metadata"

    Revision:
      type: object
      description: Revision object
      required:
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Instruction id in UUID format
        instructionId:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: "#/components/schemas/RevisionStatus"
        version:
          type: integer
          format: int32
          description: Version number
          readOnly: true
        approvedDate:
          type: string
          format: date-time
          description: Date time when current revision was approved
          readOnly: true
        metadata:
          $ref: "#/components/schemas/Metadata"

    RevisionStatus:
      type: string
      description: Revision status enum
      enum:
        - DRAFT
        - ACTIVE
        - REJECTED
        - DEPRECATED

    UserRepresentation:
      type: object
      description: User representation
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
        serviceAccountClientId:
          type: string
        requiredActions:
          type: array
          items:
            type: string
        origin:
          type: string
        self:
          type: string
        notBefore:
          type: integer
          format: int32
        lastName:
          type: string
        firstName:
          type: string
        groups:
          type: array
          items:
            type: string
        federationLink:
          type: string
        federatedIdentities:
          type: array
          items:
            type: object
        enabled:
          type: boolean
        emailVerified:
          type: boolean
        email:
          type: string
        disableableCredentialTypes:
          type: array
          items:
            type: string
        credentials:
          type: array
          items:
            type: object
        createdTimestamp:
          type: integer
          format: int64
        clientRoles:
          type: object
        clientConsents:
          type: array
          items:
            type: object
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        access:
          type: object
        realmRoles:
          type: array
          items:
            type: string